<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><title>USBDevice Class</title><meta name="robots" content="noindex, nofollow"><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/script_prototype.js"> </script><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/StyleUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/ElementCollection.js"> </script><script type="text/javascript" src="../scripts/MemberFilter.js"> </script><script type="text/javascript" src="../scripts/CollapsibleSection.js"> </script><script type="text/javascript" src="../scripts/LanguageFilter.js"> </script><script type="text/javascript" src="../scripts/CookieDataStore.js"> </script><meta name="file" content="C0DF0592" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="T:MadWizard.WinUSBNet.USBDevice" /><MSHelp:Keyword Index="A" Term="T:MadWizard.WinUSBNet.USBDevice" /><MSHelp:Keyword Index="A" Term="frlrfMadWizardWinUSBNetUSBDeviceClassTopic" /><MSHelp:Keyword Index="A" Term="frlrfMadWizardWinUSBNetUSBDeviceMembersTopic" /><MSHelp:Keyword Index="K" Term="USBDevice class" /><MSHelp:Keyword Index="K" Term="MadWizard.WinUSBNet.USBDevice class" /><MSHelp:Keyword Index="F" Term="USBDevice" /><MSHelp:Keyword Index="F" Term="MadWizard.WinUSBNet.USBDevice" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="WinUSBNet.dll" /><MSHelp:Attr Name="APIName" Value="MadWizard.WinUSBNet.USBDevice" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="The UsbDevice class represents a single WinUSB device." /></xml></head><body><div id="control"><span class="productTitle">WinUSBNet Reference</span><br /><span class="topicTitle">USBDevice Class</span><br /><div id="toolbar"><span id="chickenFeet"><a href="5455BCCD.htm">Namespaces</a> ► <a href="20A1FC82.htm">MadWizard.WinUSBNet</a> ► <span class="selflink">USBDevice</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs">C#</option><option value="VisualBasic vb">Visual Basic</option><option value="ManagedCPlusPlus cpp">Visual C++</option></select></span></div><br class="clear" /></div><div id="main"><span style="color: DarkGray"> </span><div class="summary">
            The UsbDevice class represents a single WinUSB device.
            </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Declaration Syntax</div><div class="sectionContent"><div id="syntaxSection"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="toggleClass('syntaxTabs','x-lang','CSharp','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','CSharp','display','block','none');">C#</td><td class="tab" x-lang="VisualBasic" onclick="toggleClass('syntaxTabs','x-lang','VisualBasic','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','VisualBasic','display','block','none');">Visual Basic</td><td class="tab" x-lang="ManagedCPlusPlus" onclick="toggleClass('syntaxTabs','x-lang','ManagedCPlusPlus','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','ManagedCPlusPlus','display','block','none');">Visual C++</td></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre>
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">USBDevice</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></div><div class="code" x-lang="VisualBasic"><pre>
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">USBDevice</span> _
	<span class="keyword">Implements</span> <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre>
<span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">USBDevice</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></div></div></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Members</div><div class="sectionContent"><div id="allMembersSection"><table class="filter"><tr class="tabs" id="memberTabs"><td class="tab" value="all" onclick="toggleClass('memberTabs','value','all','activeTab','tab'); processSubgroup('all', 'member'); processList('memberList','filterElement','member');">All Members</td><td class="tab" value="constructor" onclick="toggleClass('memberTabs','value','constructor','activeTab','tab'); processSubgroup('constructor','member');processList('memberList','filterElement','member');">Constructors</td><td class="tab" value="method" onclick="toggleClass('memberTabs','value','method','activeTab','tab'); processSubgroup('method','member'); processList('memberList','filterElement','member');">Methods</td><td class="tab" value="property" onclick="toggleClass('memberTabs','value','property','activeTab','tab'); processSubgroup('property','member'); processList('memberList','filterElement','member');">Properties</td></tr><tr><td class="line" colspan="2"><label for="public"><input id="public" type="checkbox" checked="true" onclick="toggleCheckState('public',this.checked); processList('memberList','filterElement','member');" />Public</label><br /><label for="protected"><input id="protected" type="checkbox" checked="true" onclick="toggleCheckState('protected',this.checked); processList('memberList','filterElement','member');" />Protected</label></td><td class="line" colspan="2"><label for="instance"><input id="instance" type="checkbox" checked="true" onclick="toggleCheckState('instance',this.checked); processList('memberList','filterElement','member');" />Instance</label><br /><label for="static"><input id="static" type="checkbox" checked="true" onclick="toggleCheckState('static',this.checked); processList('memberList','filterElement','member');" />Static</label></td><td class="line" colspan="2"><label for="declared"><input id="declared" type="checkbox" checked="true" onclick="toggleCheckState('declared',this.checked); processList('memberList','filterElement','member');" />Declared</label><br /><label for="inherited"><input id="inherited" type="checkbox" checked="true" onclick="toggleCheckState('inherited',this.checked); processList('memberList','filterElement','member');" />Inherited</label></td></tr></table><table class="members" id="memberList"><tr><th class="iconColumn">Icon</th><th class="nameColumn">Member</th><th class="descriptionColumn">Description</th></tr><tr data="constructor; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="284B3468.htm">USBDevice(USBDeviceInfo)</a></td><td><div class="summary">
            Constructs a new USB device
            </div><br /></td></tr><tr data="constructor; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="DF912B90.htm">USBDevice(String)</a></td><td><div class="summary">
            Constructs a new USB device
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="E0732BB3.htm">BeginControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32, AsyncCallback, Object)</a></td><td><div class="summary">
            Initiates an asynchronous control transfer over the default control endpoint.  The request should have an IN direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter).</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="3DCBB718.htm">BeginControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, AsyncCallback, Object)</a></td><td><div class="summary">
            Initiates an asynchronous control transfer over the default control endpoint. The request should have an IN direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter).</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="2F5984D8.htm">BeginControlIn(Byte, Byte, Int32, Int32, AsyncCallback, Object)</a></td><td><div class="summary">
            Initiates an asynchronous control transfer without a data stage over the default control endpoint. 
            The request should have an IN direction (specified by the highest bit of the <span class="parameter">requestType</span> parameter).
            The setup packets' length member will be set to zero.</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="74593F44.htm">BeginControlOut(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32, AsyncCallback, Object)</a></td><td><div class="summary">
            Initiates an asynchronous control transfer over the default control endpoint.  The request should have an OUT direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter).</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="74593F45.htm">BeginControlOut(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, AsyncCallback, Object)</a></td><td><div class="summary">
            Initiates an asynchronous control transfer over the default control endpoint. The request should have an OUT direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter).</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="3D565AD3.htm">BeginControlOut(Byte, Byte, Int32, Int32, AsyncCallback, Object)</a></td><td><div class="summary">
            Initiates an asynchronous control transfer without a data stage over the default control endpoint. 
            The request should have an OUT direction (specified by the highest bit of the <span class="parameter">requestType</span> parameter).
            The setup packets' length member will be set to zero.</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="3419BA5F.htm">BeginControlTransfer(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32, AsyncCallback, Object)</a></td><td><div class="summary">
            Initiates an asynchronous control transfer over the default control endpoint. This method allows both IN and OUT direction transfers, depending
            on the highest bit of the <span class="parameter">requestType</span> parameter. Alternatively, <a href="E0732BB3.htm">BeginControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32, AsyncCallback, Object)</a> and
            <a href="E0732BB3.htm">BeginControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32, AsyncCallback, Object)</a> can be used for asynchronous control transfers in a specific direction, which is 
            the recommended way because it prevents using the wrong direction accidentally. Use the BeginControlTransfer method when the direction is not 
            known at compile time. </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="1C101830.htm">BeginControlTransfer(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, AsyncCallback, Object)</a></td><td><div class="summary">
            Initiates an asynchronous control transfer over the default control endpoint. This method allows both IN and OUT direction transfers, depending
            on the highest bit of the <span class="parameter">requestType</span> parameter. Alternatively, <a href="E0732BB3.htm">BeginControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32, AsyncCallback, Object)</a> and
            <a href="E0732BB3.htm">BeginControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32, AsyncCallback, Object)</a> can be used for asynchronous control transfers in a specific direction, which is 
            the recommended way because it prevents using the wrong direction accidentally. Use the BeginControlTransfer method when the direction is not 
            known at compile time. </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="D8FE8004.htm">BeginControlTransfer(Byte, Byte, Int32, Int32, AsyncCallback, Object)</a></td><td><div class="summary">
            Initiates an asynchronous control transfer without a data stage over the default control endpoint. This method allows both IN and OUT direction transfers, depending
            on the highest bit of the <span class="parameter">requestType</span> parameter. Alternatively, <a href="E0732BB3.htm">BeginControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32, AsyncCallback, Object)</a> and
            <a href="E0732BB3.htm">BeginControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32, AsyncCallback, Object)</a> can be used for asynchronous control transfers in a specific direction, which is 
            the recommended way because it prevents using the wrong direction accidentally. Use the BeginControlTransfer method when the direction is not 
            known at compile time. </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="BFF73571.htm">ControlIn(Byte, Byte, Int32, Int32, Int32)</a></td><td><div class="summary">
            Initiates a control transfer over the default control endpoint. The request should have an IN direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter). A buffer to receive the data is automatically created by this method.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="BFF73570.htm">ControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32)</a></td><td><div class="summary">
            Initiates a control transfer over the default control endpoint. The request should have an IN direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter).
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="BFF73573.htm">ControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a></td><td><div class="summary">
            Initiates a control transfer over the default control endpoint. The request should have an IN direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter). The length of buffer given by the <span class="parameter">buffer</span> parameter will dictate
            the number of bytes that are transfered and the value of the setup packet's length member.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="8A1EF1B5.htm">ControlIn(Byte, Byte, Int32, Int32)</a></td><td><div class="summary">
            Initiates a control transfer without a data stage over the default control endpoint. The request should have an IN direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter). The setup packets' length member will be set to zero.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="994CC8D1.htm">ControlOut(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32)</a></td><td><div class="summary">
            Initiates a control transfer over the default control endpoint. The request should have an OUT direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter).
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="814326A2.htm">ControlOut(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a></td><td><div class="summary">
            Initiates a control transfer over the default control endpoint. The request should have an OUT direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter).
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="27101722.htm">ControlOut(Byte, Byte, Int32, Int32)</a></td><td><div class="summary">
            Initiates a control transfer without a data stage over the default control endpoint. The request should have an OUT direction (specified by the highest bit
            of the <span class="parameter">requestType</span> parameter. The setup packets' length member will be set to zero.
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="F3B0EF8.htm">ControlPipeTimeout</a></td><td><div class="summary">
            Specifies the timeout in milliseconds for control pipe operations. If a control transfer does not finish within the specified time it will fail.
            When set to zero, no timeout is used. Default value is 5000 milliseconds.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="5A87B280.htm">ControlTransfer(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32)</a></td><td><div class="summary">
            Initiates a control transfer over the default control endpoint. This method allows both IN and OUT direction transfers, depending
            on the highest bit of the <span class="parameter">requestType</span> parameter. Alternatively, <a href="BFF73570.htm">ControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32)</a> and
            <a href="994CC8D1.htm">ControlOut(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32)</a> can be used for control transfers in a specific direction, which is the recommended way because
            it prevents using the wrong direction accidentally. Use the ControlTransfer method when the direction is not known at compile time.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="5A87B27F.htm">ControlTransfer(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a></td><td><div class="summary">
            Initiates a control transfer over the default control endpoint. This method allows both IN and OUT direction transfers, depending
            on the highest bit of the <span class="parameter">requestType</span> parameter). Alternatively, <a href="BFF73573.htm">ControlIn(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a> and
            <a href="814326A2.htm">ControlOut(Byte, Byte, Int32, Int32, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a> can be used for control transfers in a specific direction, which is the recommended way because
            it prevents using the wrong direction accidentally. Use the ControlTransfer method when the direction is not known at compile time.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="6D810D9D.htm">ControlTransfer(Byte, Byte, Int32, Int32)</a></td><td><div class="summary">
            Initiates a control transfer without a data stage over the default control endpoint. This method allows both IN and OUT direction transfers, depending
            on the highest bit of the <span class="parameter">requestType</span> parameter). Alternatively, <a href="8A1EF1B5.htm">ControlIn(Byte, Byte, Int32, Int32)</a> and
            <a href="27101722.htm">ControlOut(Byte, Byte, Int32, Int32)</a> can be used for control transfers in a specific direction, which is the recommended way because
            it prevents using the wrong direction accidentally. Use the ControlTransfer method when the direction is not known at compile time.
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="6363F4BF.htm">Descriptor</a></td><td><div class="summary">
            Device descriptor with information about the device
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="E345B60A.htm">Dispose<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Disposes the UsbDevice including all unmanaged WinUSB handles. This function
            should be called when the UsbDevice object is no longer in use, otherwise
            unmanaged handles will remain open until the garbage collector finalizes the
            object.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="D834013E.htm">Dispose(Boolean)</a></td><td><div class="summary">
            Disposes the object
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="BC5F97C4.htm">EndControlTransfer(IAsyncResult)</a></td><td><div class="summary">
            Waits for a pending asynchronous control transfer to complete.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="20EAC2D7.htm">Finalize<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Finalizer for the UsbDevice. Disposes all unmanaged handles.
            </div> (Overrides <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.<a href="http://msdn2.microsoft.com/en-us/library/4k87zsw7" target="_blank">Finalize<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a>.)<br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="799368C6.htm">GetDevices(String)</a></td><td><div class="summary">
            Finds WinUSB devices with a GUID matching the parameter guidString
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="C9BD306E.htm">GetDevices(Guid)</a></td><td><div class="summary">
            Finds WinUSB devices with a GUID matching the parameter guid
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="253FBBF1.htm">GetSingleDevice(Guid)</a></td><td><div class="summary">
            Finds the first WinUSB device with a GUID matching the parameter guid.
            If multiple WinUSB devices match the GUID only the first one is returned.
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="E9A890DF.htm">GetSingleDevice(String)</a></td><td><div class="summary">
            Finds the first WinUSB device with a GUID matching the parameter guidString.
            If multiple WinUSB devices match the GUID only the first one is returned.
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="A9591ECC.htm">Interfaces</a></td><td><div class="summary">
            Collection of all interfaces available on the USB device
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="EF83160F.htm">Pipes</a></td><td><div class="summary">
            Collection of all pipes available on the USB device
            </div><br /></td></tr></table></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Inheritance Hierarchy</div><div class="sectionContent"><table cellspacing="0" cellpadding="0"><tr><td colspan="2"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a></td></tr><tr><td><img src="../icons/LastChild.gif" /></td><td><span class="selflink">USBDevice</span></td></tr></table></div></div><p><div id="footer"> <p /><a href="http://www.madwizard.org/" target="_blank">(C) 2010 Thomas Bleeker</a></div>Assembly: <span sdata="assembly">WinUSBNet</span> (Module: WinUSBNet) Version: 1.0.0.0 (1.0.0.0)</p></div></body></html>